Wykonuje okre˜lone polecenie dla wszystkich plik¢w ze zbioru plik¢w.

FOR %zmienna IN (zbi¢r) DO polecenie [parametry_polecenia]

  %zmienna   Okre˜la jednoliterowy parametr wymienny.
  (zbi¢r)    Okre˜la zbi¢r - jeden lub kilka plik¢w. U¾ywanie symboli
             wieloznacznych jest dozwolone.
  polecenie  Okre˜la polecenie, kt¢re ma by† wykonane dla ka¾dego pliku.
  parametry_polecenia
             Okre˜la parametry lub opcje dla okre˜lonego polecenia.

Aby u¾y† polecenia FOR w programie wsadowym, wpisz %%zmienna zamiast
%zmienna.  W nazwach zmiennych rozr¢¾nia si© maˆe i wielkie litery,
tak wi©c %i r¢¾ni si© od %I

Przy wˆ¥czonych rozszerzeniach poleceä obsˆugiwane s¥ nast©puj¥ce dodatkowe
formy polecenia FOR:

FOR /D %zmienna IN (zbi¢r) DO polecenie [parametry-polecenia]

    Je˜li "zbi¢r" zawiera symbole wieloznaczne, to maj¥ by† poszukiwane
    odpowiednie nazwy katalog¢w, a nie nazwy plik¢w.

FOR /R [[dysk:]˜cie¾ka] %zmienna IN (zbi¢r) DO polecenie [parametry-polecenia]

    W©druje po drzewie katalog¢w poczynaj¥c od katalogu [dysk:]˜cie¾ka,
    wykonuj¥c polecenie FOR w ka¾dym katalogu tego drzewa.
    Je˜li po /R nie podano ¾adnego katalogu, to u¾ywany jest katalog bie¾¥cy.
    Je˜li "zbi¢r" jest okre˜lony tylko przez pojedynczy znak kropki (.), to
    polecenie wyliczy tylko zawarto˜† drzewa katalog¢w.

FOR /L %zmienna IN (pocz¥tek,krok,koniec) DO polecenie [parametry-polecenia]

    W tym przypadku zbi¢r jest ci¥giem liczb od warto˜ci "pocz¥tek" do warto˜ci
    "koniec", zmieniaj¥cych si© o warto˜† "krok". Tak wi©c (1,1,5) generuje
    ci¥g 1 2 3 4 5, a (5,-1,1) generuje ci¥g (5 4 3 2 1)

FOR /F ["opcje"] %zmienna IN (zbi¢rplik¢w) DO polecenie [parametry-polecenia]
FOR /F ["opcje"] %zmienna IN ("ci¥g") DO polecenie [parametry-polecenia]
FOR /F ["opcje"] %zmienna IN ('polecenie') DO polecenie [parametry-polecenia]

    lub, je˜li obecna jest opcja usebackq:

FOR /F ["opcje"] %zmienna IN (zbi¢rplik¢w) DO polecenie [parametry-polecenia]
FOR /F ["opcje"] %zmienna IN ('ci¥g') DO polecenie [parametry-polecenia]
FOR /F ["opcje"] %zmienna IN (`polecenie`) DO polecenie [parametry-polecenia]

    zbi¢rplik¢w jest jedn¥ lub wieloma nazwami plik¢w. Ka¾dy plik jest
    otwierany, odczytywany i przetwarzany przed przej˜ciem do nast©pnego
    pliku z tego zbioru. Przetwarzanie polega na odczytaniu pliku, podzieleniu
    go na poszczeg¢lne wiersze tekstu i podzieleniu ka¾dego wiersza na zero
    lub wi©cej leksem¢w. W¢wczas wywoˆywana jest gˆ¢wne polecenie p©tli,
    przy czym jako warto˜ci zmiennych s¥ przypisywane ci¥gi znalezionych
    leksem¢w. Domy˜lnie opcja /F przekazuje pierwszy oddzielony spacj¥ leksem
    z pierwszego wiersza ka¾dego pliku. Puste wiersze s¥ pomijane. Mo¾na
    zmieni† domy˜lny spos¢b podziaˆu wierszy okre˜laj¥c opcjonalny parametr
    "opcje". Jest to ci¥g umieszczony w cudzysˆowie, kt¢ry zawiera jedno
    lub wi©cej sˆ¢w kluczowych okre˜laj¥cych r¢¾ne parametry podziaˆu.
    Dost©pne s¥ nast©puj¥ce sˆowa kluczowe:

        eol=c           - okre˜la znak komentarza koäca wiersza (tylko jeden)
        skip=n          - okre˜la liczb© wierszy do pomini©cia na pocz¥tku
                          pliku.
        delims=xxx      - okre˜la zestaw ogranicznik¢w. Zast©puje domy˜lny
                          zestaw ogranicznik¢w (spacj© i tabulator).
        tokens=x,y,m-n  - okre˜la tokeny, kt¢re maj¥ by† przekazywane
                          z ka¾dego wiersza do gˆ¢wnego polecenia w ka¾dej
                          iteracji. Spowoduje to przydzielenie dodatkowych
                          nazw zmiennych. m-n oznacza zakres, czyli tokeny
                          od m-tego do n-tego. Je˜li ostatni znak ci¥gu
                          tokens= jest gwiazdk¥, w¢wczas przydzielana jest
                          dodatkowa zmienna, kt¢ra otrzymuje pozostaˆy tekst
                          z wiersza po przydzieleniu ostatniego tokenu.
        usebackq        - okre˜la, czy wymuszane s¥ nowe semantyki,
                          gdzie ci¥g w odwrotnych apostrofach jest wykonywany
                          jako polecenie, a ci¥g w apostrofach jest literaˆem
                          polecenia i zezwala na u¾ycie cudzysˆow¢w dla nazw
                          plik¢w w zbi¢rplik¢w.

    Przykˆady, kt¢re mog¥ pom¢c:

FOR /F "eol=; tokens=2,3* delims=, " %i in (m¢jplik.txt) do @echo %i %j %k

    analizuje ka¾dy wiersz w pliku m¢jplik.txt, ignoruj¥c wiersze
    rozpoczynaj¥ce si© od ˜rednika, przekazuje drugi i trzeci token z ka¾dego
    wiersza do gˆ¢wnego polecenia, z tokenami rozdzielonymi przecinkami i/lub
    spacjami. Zauwa¾, ¾e dla gˆ¢wnego polecenia odwoˆanie instrukcji %i
    pobiera drugi token, %j trzeci token, a %k pobiera wszystkie pozostaˆe
    tokeny po trzecim. Dla nazw plik¢w zawieraj¥cych spacje, nale¾y stosowa†
    cudzysˆowy. Aby u¾ywa† cudzysˆow¢w w ten spos¢b, nale¾y r¢wnie¾ u¾y† opcji
    usebackq, bo w przeciwnym razie cudzysˆowy b©d¥ interpretowane do analizy
    jako ci¥g literalny.

    %i jest deklarowane jawnie w instrukcji, a %j i %k s¥ jawnie
    deklarowane poprzez opcj© tokens=. Mo¾na okre˜li† do 26 token¢w za pomoc¥
    wiersza tokens=, nie pr¢buj¥c zadeklarowania zmiennej wi©kszej ni¾ litera
    'z' lub 'Z'. Pami©taj, ¾e zmienne FOR s¥ jednoliterowe, uwzgl©dniaj¥
    wielko˜† liter, s¥ globalne i nie mo¾na mie† ich aktywnych wi©cej ni¾ 52
    w tym samym czasie.

    Mo¾na r¢wnie¾ u¾y† logicznego analizowania FOR /F na ci¥gu
    natychmiastowym umieszczaj¥c w apostrofach zbi¢rplik¢w mi©dzy nawiasami.
    B©dzie to potraktowane jako pojedynczy wiersz wyj˜cia z pliku
    i przeanalizowane.

    Na koniec, mo¾na te¾ u¾y† polecenia FOR /F do analizy wyj˜cia polecenia.
    Dokonuje si© tego umieszczaj¥c w odwrotnych apostrofach zbi¢rplik¢w mi©dzy
    nawiasami. B©dzie to potraktowane jako wiersz polecenia, kt¢ry jest
    przekazywany do podrz©dnego programu CMD.EXE. Wyj˜cie jest wtedy
    przechwytywane do pami©ci i analizowane jakby byˆ to plik.
    Zobacz nast©puj¥cy przykˆad:

      FOR /F "usebackq delims==" %i IN (`zbi¢r`) DO @echo %i

    wyliczy nazwy zmiennych ˜rodowiskowych w bie¾¥cym ˜rodowisku.

Ponadto, zostaˆo ulepszone podstawianie odwoˆaä zmiennej FOR.
Mo¾esz teraz u¾ywa† nast©puj¥cej opcjonalnej skˆadni:

    %~I         - rozwija %I usuwaj¥c wszystkie obejmuj¥ce cudzysˆowy (")
    %~fI        - rozwija %I do peˆnej nazwy ˜cie¾ki
    %~dI        - rozwija %I tylko do litery dysku
    %~pI        - rozwija %I tylko do ˜cie¾ki
    %~nI        - rozwija %I tylko do nazwy pliku
    %~xI        - rozwija %I tylko do rozszerzenia pliku
    %~sI        - rozwini©ta ˜cie¾ka zawiera tylko kr¢tkie nazwy
    %~aI        - rozwija %I do atrybut¢w pliku
    %~tI        - rozwija %I do daty/czasu pliku
    %~zI        - rozwija %I do rozmiaru pliku
    %~$PATH:I   - przeszukuje katalogi wymienione w zmiennej ˜rodowiskowej
                  PATH i rozwija %I do peˆnej nazwy dla pierwszej
                  znalezionej. Je˜li nazwa zmiennej ˜rodowiskowej nie zostaˆa
                  zdefiniowana lub pliku nie znaleziono w wyszukiwaniu,
                  modyfikator rozwija do pustego ci¥gu.

Modyfikatory mog¥ by† ˆ¥czone w celu uzyskania zˆo¾onych wynik¢w:

    %~dpI       - rozwija %I tylko do litery dysku i ˜cie¾ki
    %~nxI       - rozwija %I tylko do nazwy pliku i rozszerzenia
    %~fsI       - rozwija %I tylko do peˆnej nazwy ˜cie¾ki z kr¢tkimi
                   nazwami
    %~dp$PATH:i - przeszukuje katalogi wymienione w zmiennej ˜rodowiskowej
                  PATH i rozwija %I do litery dysku i ˜cie¾ki dla pierwszej
                  znalezionej.
    %~ftzaI     - rozwija %I do DIR jak wiersz wyj˜ciowy

W powy¾szych przykˆadach %I i PATH mo¾na zast¥pi† innymi prawidˆowymi
warto˜ciami. Skˆadnia %~ jest zakoäczona prawidˆow¥ nazw¥ zmiennej FOR.
Stosowanie du¾ych liter dla nazw zmiennych, jak np. %I czyni
je czytelniejszymi i zapobiega myleniu z modyfikatorami, kt¢re
nie uwzgl©dniaj¥ wielko˜ci liter.
